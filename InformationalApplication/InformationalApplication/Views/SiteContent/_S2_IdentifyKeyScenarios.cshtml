
<div class="subbody-one">

    <h2><b>Стъпка 2 - Определяне на ключов/и сценарий/сценарии.</b></h2>
    <p>За да се получат най-важните резултати от един стрес-тест, той трябва да се фокусира върху сценария или сценариите за употреба които са най важни за цялостния успех на приложението. За да се определят тези сценарии, се започва с определянето първоначално на един сценарий при който искаме да приложим стрес-тестването, с цел да определим потенциалните проблеми при изпълнението на приложението. Вземете в предвид следните неща при избор на сценарий:</p>
    <ul>
        <li>Избирайте сценарии основани на това колко важни са за цялостното изпълнение на приложението.</li>
        <li>Опитайте се да тествате онези операции, които е най-вероятно да влияят на производителността. Те може да включват операции, които правят интензивно заключване и синхронизация, дълги </li>
        <li>Базирайте своя избор на сценарий на специфични части на вашето приложение определени като трафик места от данните за тестване на натоварването. Въпреки че би трябвало да сте настроили фино и да сте премахнали тези места след теста за натоварване, по-добре направете стрес-тест на системата в тези части, за да определите колко добре се справят промените ви при високи нива на стрес.</li>
    </ul>
    <p>Примери за сценарии които да се тестват отделно от други сценарии за употреба за типично приложение за електронна търговия включват следното:</p>
    <ul>
        <li>Сценарий за ъпдейтване на инвентара при обработка на поръчка за определен продукт. Тази функционалност има потенциала да покаже заключващи проблеми и проблеми със синхронизацията.</li>
        <li>Сценарий за показване на резултат, базиран на потребителска заявка. Ако потребителят подаде често заявка с широк обхват, може да има проблем при ползването на паметта. Например използването на паметта може да се засегне от заявка при връщане на цяла таблица от данни.</li>
    </ul>
    @Html.ActionLink("Начало", "Index", "Home")


</div>